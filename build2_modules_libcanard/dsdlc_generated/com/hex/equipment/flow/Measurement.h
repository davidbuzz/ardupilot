/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/buzz/ardupilot/libraries/AP_UAVCAN/dsdl/com/hex/equipment/flow/20200.Measurement.uavcan
 */

#ifndef __COM_HEX_EQUIPMENT_FLOW_MEASUREMENT
#define __COM_HEX_EQUIPMENT_FLOW_MEASUREMENT

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
float32 integration_interval    # Integration Interval in seconds
float32[2] rate_gyro_integral   # Integrated Gyro Data in radians
float32[2] flow_integral        # Integrated LOS Data in radians
uint8 quality                   # Flow Data Quality Lowest(0)-Highest(255) Unitless
******************************************************************************/

/********************* DSDL signature source definition ***********************
com.hex.equipment.flow.Measurement
saturated float32 integration_interval
saturated float32[2] rate_gyro_integral
saturated float32[2] flow_integral
saturated uint8 quality
******************************************************************************/

#define COM_HEX_EQUIPMENT_FLOW_MEASUREMENT_ID              20200
#define COM_HEX_EQUIPMENT_FLOW_MEASUREMENT_NAME            "com.hex.equipment.flow.Measurement"
#define COM_HEX_EQUIPMENT_FLOW_MEASUREMENT_SIGNATURE       (0x6A908866BCB49C18ULL)

#define COM_HEX_EQUIPMENT_FLOW_MEASUREMENT_MAX_SIZE        ((168 + 7)/8)

// Constants

#define COM_HEX_EQUIPMENT_FLOW_MEASUREMENT_RATE_GYRO_INTEGRAL_LENGTH                     2
#define COM_HEX_EQUIPMENT_FLOW_MEASUREMENT_FLOW_INTEGRAL_LENGTH                          2

typedef struct
{
    // FieldTypes
    float      integration_interval;          // float32 Saturate
    float      rate_gyro_integral[2];         // Static Array 32bit[2] max items
    float      flow_integral[2];              // Static Array 32bit[2] max items
    uint8_t    quality;                       // bit len 8

} com_hex_equipment_flow_Measurement;

static inline
uint32_t com_hex_equipment_flow_Measurement_encode(com_hex_equipment_flow_Measurement* source, void* msg_buf);

static inline
int32_t com_hex_equipment_flow_Measurement_decode(const CanardRxTransfer* transfer, uint16_t payload_len, com_hex_equipment_flow_Measurement* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t com_hex_equipment_flow_Measurement_encode_internal(com_hex_equipment_flow_Measurement* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t com_hex_equipment_flow_Measurement_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, com_hex_equipment_flow_Measurement* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/buzz/ardupilot/libraries/AP_UAVCAN/dsdl/com/hex/equipment/flow/20200.Measurement.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) >= max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief com_hex_equipment_flow_Measurement_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t com_hex_equipment_flow_Measurement_encode_internal(com_hex_equipment_flow_Measurement* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    canardEncodeScalar(msg_buf, offset, 32, (void*)&source->integration_interval); // 2147483647
    offset += 32;

    // Static array (rate_gyro_integral)
    for (c = 0; c < 2; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->rate_gyro_integral + c)); // 2147483647
        offset += 32;
    }

    // Static array (flow_integral)
    for (c = 0; c < 2; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->flow_integral + c)); // 2147483647
        offset += 32;
    }

    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->quality); // 255
    offset += 8;

    return offset;
}

/**
  * @brief com_hex_equipment_flow_Measurement_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t com_hex_equipment_flow_Measurement_encode(com_hex_equipment_flow_Measurement* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = com_hex_equipment_flow_Measurement_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief com_hex_equipment_flow_Measurement_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     com_hex_equipment_flow_Measurement dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t com_hex_equipment_flow_Measurement_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  com_hex_equipment_flow_Measurement* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 32, false, (void*)&dest->integration_interval);
    if (ret != 32)
    {
        goto com_hex_equipment_flow_Measurement_error_exit;
    }
    offset += 32;

    // Static array (rate_gyro_integral)
    for (c = 0; c < 2; c++)
    {
        ret = canardDecodeScalar(transfer, (uint32_t)offset, 32, false, (void*)(dest->rate_gyro_integral + c));
        if (ret != 32)
        {
            goto com_hex_equipment_flow_Measurement_error_exit;
        }
        offset += 32;
    }

    // Static array (flow_integral)
    for (c = 0; c < 2; c++)
    {
        ret = canardDecodeScalar(transfer, (uint32_t)offset, 32, false, (void*)(dest->flow_integral + c));
        if (ret != 32)
        {
            goto com_hex_equipment_flow_Measurement_error_exit;
        }
        offset += 32;
    }

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 8, false, (void*)&dest->quality);
    if (ret != 8)
    {
        goto com_hex_equipment_flow_Measurement_error_exit;
    }
    offset += 8;
    return offset;

com_hex_equipment_flow_Measurement_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief com_hex_equipment_flow_Measurement_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     com_hex_equipment_flow_Measurement dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t com_hex_equipment_flow_Measurement_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  com_hex_equipment_flow_Measurement* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(com_hex_equipment_flow_Measurement); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = com_hex_equipment_flow_Measurement_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __COM_HEX_EQUIPMENT_FLOW_MEASUREMENT